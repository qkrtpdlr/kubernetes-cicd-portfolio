// Fresh Chicken CI/CD Pipeline
// 
// Stages:
// 1. Checkout - GitHubÏóêÏÑú ÏÜåÏä§ ÏΩîÎìú Í∞ÄÏ†∏Ïò§Í∏∞
// 2. Build & Test - Gradle ÎπåÎìú Î∞è ÌÖåÏä§Ìä∏
// 3. Docker Build & Push - KanikoÎ°ú Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è ECR Push
// 4. Update Manifest - Kubernetes Manifest ÏóÖÎç∞Ïù¥Ìä∏
// 5. Trigger ArgoCD - ArgoCD Sync Ìä∏Î¶¨Í±∞

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  serviceAccountName: jenkins
  containers:
  - name: gradle
    image: gradle:8.5-jdk17
    command:
    - cat
    tty: true
    volumeMounts:
    - name: gradle-cache
      mountPath: /home/gradle/.gradle
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command:
    - /busybox/cat
    tty: true
    volumeMounts:
    - name: docker-config
      mountPath: /kaniko/.docker
  volumes:
  - name: gradle-cache
    emptyDir: {}
  - name: docker-config
    configMap:
      name: docker-config
"""
        }
    }

    environment {
        // AWS ECR
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        AWS_REGION = 'ap-northeast-2'
        ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/fresh-chicken"
        
        // ArgoCD
        ARGOCD_SERVER = 'argocd.fresh-chicken.org'
        ARGOCD_APP = 'fresh-chicken-app'
        
        // Git
        GIT_MANIFEST_REPO = 'https://github.com/qkrtpdlr/kubernetes-cicd-infrastructure.git'
        
        // Image Tag
        IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "=========================================="
                    echo "Stage 1: Checkout Source Code"
                    echo "=========================================="
                    
                    checkout scm
                    
                    // Git Ï†ïÎ≥¥ Ï∂úÎ†•
                    sh '''
                        echo "Git Branch: ${GIT_BRANCH}"
                        echo "Git Commit: ${GIT_COMMIT}"
                        echo "Git Author: $(git log -1 --pretty=format:'%an')"
                        echo "Git Message: $(git log -1 --pretty=format:'%s')"
                    '''
                }
            }
        }

        stage('Build & Test') {
            steps {
                container('gradle') {
                    script {
                        echo "=========================================="
                        echo "Stage 2: Build & Test with Gradle"
                        echo "=========================================="
                        
                        dir('fresh-chicken-app') {
                            // Gradle ÎπåÎìú
                            sh '''
                                gradle clean build -x test --no-daemon
                                echo "Build completed successfully!"
                                
                                # JAR ÌååÏùº ÌôïÏù∏
                                ls -lh build/libs/
                            '''
                            
                            // Unit Test Ïã§Ìñâ
                            sh '''
                                gradle test --no-daemon
                                echo "Tests completed!"
                            '''
                        }
                    }
                }
            }
            post {
                always {
                    // Test Í≤∞Í≥º ÏïÑÏπ¥Ïù¥Î∏å
                    junit 'fresh-chicken-app/build/test-results/test/*.xml'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                container('kaniko') {
                    script {
                        echo "=========================================="
                        echo "Stage 3: Docker Build & Push with Kaniko"
                        echo "=========================================="
                        
                        dir('fresh-chicken-app') {
                            sh """
                                /kaniko/executor \\
                                    --context=\${WORKSPACE}/fresh-chicken-app \\
                                    --dockerfile=\${WORKSPACE}/fresh-chicken-app/Dockerfile \\
                                    --destination=${ECR_REPOSITORY}:${IMAGE_TAG} \\
                                    --destination=${ECR_REPOSITORY}:latest \\
                                    --cache=true \\
                                    --cache-repo=${ECR_REPOSITORY}/cache \\
                                    --cleanup
                                
                                echo "Docker image pushed successfully!"
                                echo "Image: ${ECR_REPOSITORY}:${IMAGE_TAG}"
                            """
                        }
                    }
                }
            }
        }

        stage('Update Manifest') {
            steps {
                script {
                    echo "=========================================="
                    echo "Stage 4: Update Kubernetes Manifest"
                    echo "=========================================="
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'github-credentials',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        sh """
                            # Git ÏÑ§Ï†ï
                            git config --global user.email "jenkins@fresh-chicken.org"
                            git config --global user.name "Jenkins CI"
                            
                            # Manifest Ï†ÄÏû•ÏÜå ÌÅ¥Î°†
                            git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/qkrtpdlr/kubernetes-cicd-infrastructure.git manifest-repo
                            cd manifest-repo
                            
                            # Image Tag ÏóÖÎç∞Ïù¥Ìä∏
                            sed -i "s|image: .*fresh-chicken:.*|image: ${ECR_REPOSITORY}:${IMAGE_TAG}|g" kubernetes/app/deployment.yaml
                            
                            # Git Commit & Push
                            git add kubernetes/app/deployment.yaml
                            git commit -m "Update image to ${IMAGE_TAG} by Jenkins Build #${BUILD_NUMBER}"
                            git push origin main
                            
                            echo "Manifest updated successfully!"
                        """
                    }
                }
            }
        }

        stage('Trigger ArgoCD') {
            steps {
                script {
                    echo "=========================================="
                    echo "Stage 5: Trigger ArgoCD Sync"
                    echo "=========================================="
                    
                    withCredentials([string(credentialsId: 'argocd-token', variable: 'ARGOCD_TOKEN')]) {
                        sh """
                            # ArgoCD Sync API Ìò∏Ï∂ú
                            curl -X POST \\
                                https://${ARGOCD_SERVER}/api/v1/applications/${ARGOCD_APP}/sync \\
                                -H "Authorization: Bearer ${ARGOCD_TOKEN}" \\
                                -H "Content-Type: application/json" \\
                                -d '{"prune": false, "dryRun": false, "strategy": {"hook": {}}}'
                            
                            echo ""
                            echo "ArgoCD Sync triggered successfully!"
                            echo "Check deployment status: https://${ARGOCD_SERVER}/applications/${ARGOCD_APP}"
                        """
                        
                        // ArgoCD Sync ÏÉÅÌÉú ÌôïÏù∏ (ÏµúÎåÄ 5Î∂Ñ ÎåÄÍ∏∞)
                        sh """
                            for i in {1..30}; do
                                STATUS=\$(curl -s \\
                                    https://${ARGOCD_SERVER}/api/v1/applications/${ARGOCD_APP} \\
                                    -H "Authorization: Bearer ${ARGOCD_TOKEN}" | \\
                                    jq -r '.status.sync.status')
                                
                                echo "ArgoCD Sync Status: \${STATUS}"
                                
                                if [ "\${STATUS}" = "Synced" ]; then
                                    echo "Deployment completed successfully!"
                                    exit 0
                                fi
                                
                                sleep 10
                            done
                            
                            echo "Warning: Sync is taking longer than expected. Check ArgoCD UI."
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo """
            ========================================
            üéâ Pipeline SUCCESS!
            ========================================
            Build Number: ${BUILD_NUMBER}
            Git Commit: ${GIT_COMMIT}
            Docker Image: ${ECR_REPOSITORY}:${IMAGE_TAG}
            Deployment: https://www.fresh-chicken.org
            Monitoring: https://grafana.fresh-chicken.org
            ========================================
            """
        }
        failure {
            echo """
            ========================================
            ‚ùå Pipeline FAILED!
            ========================================
            Build Number: ${BUILD_NUMBER}
            Git Commit: ${GIT_COMMIT}
            Check logs for details.
            ========================================
            """
        }
        always {
            // Workspace Ï†ïÎ¶¨
            cleanWs()
        }
    }
}
